---
description: 
globs: 
alwaysApply: true
---
---
description: 추상화, 컴포넌트 작성 룰
globs: 
---
1. 컴포넌트 유형 분류
컴포넌트는 기본적으로 세 가지 유형으로 구분합니다. 각 유형은 역할과 책임, 재사용성, 추상화 레벨에 따라 다르게 작성되어야 합니다.

1.1 단순 Headless Component
정의:
상태값이나 데이터(로직, 이펙트, 핸들러 함수, 유틸리티 등)와 View가 명확하게 분리된 컴포넌트로, MVVM 모델에서의 View와 ViewModel의 관계와 유사합니다.
특징:
재사용성: 다른 컴포넌트에서 쉽게 재사용할 수 있도록 작성
목적: View Component가 정상적으로 기능하기 위해 필요한 모든 로직 및 상태를 정의
예시: Button, RowCard, ConfirmModal 등

1.2 Combined Headless Component
정의:
Headless 컴포넌트, 컴포넌트 훅, Provider 등이 조합되어 하나의 컴포넌트로 구성된 유형입니다.
특징:
구성 다양성: 조합되는 구성 요소에 따라 다양한 경우의 수가 존재
상태 공유: 상황에 따라 Context를 활용해 구성 컴포넌트 간 상태를 공유할 수 있음
추가 모듈: 별도의 provider.tsx와 같은 모듈을 구성하여, Context 관리 및 공유를 명확하게 해야 함

예 : Accordion.Root , Accordion.Header, Accordion.Title ...


1.3 NonHeadless Component
정의:
View와 ViewModel로의 분리가 어렵거나 효용성이 높지 않은 경우 작성하는 전통적인 재사용 가능한 UI 컴포넌트로, 기본 디자인과 레이아웃이 포함됩니다.
특징:
열린 구조: 사용되는 문맥에 따라 외부에서 데이터 주입이 가능하도록 유연하게 작성되어야 함
패턴: 대표적으로 render props 패턴 등을 활용하여, 다양한 사용 상황에 대응할 수 있도록 설계
추상화 레벨:
NonHeadless 컴포넌트는 Combined Headless 또는 단순 Headless에 비해 추상화 레벨이 낮습니다.

1.1과 1.2 컴포넌트는 프로젝트나 특정 도메인에 의존관계가 없는 컴포넌트로 도메인에 관계없는 재사용을 요구합니다.

1.3의 경우 도메인이나 프로젝트에서 요구하는 특정 페이지, 기능 등에 의해 그 필요가 정의된 느낌이 강하므로, 적게는 해당 페이지에서만, 많게는 유사한 페이지 및 기능에서만 사용할 수 있는 컴포넌트입니다.