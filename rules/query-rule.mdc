---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: false
---
---
description: API 요청 함수 및 React Query 훅 작성 규칙
globs: 
  - "service/inbound/query/**/*.ts" 
---

# API 요청 및 React Query 훅 작성 규칙

이 문서는 `@tanstack/react-query`를 사용하여 API 데이터를 가져오고 관리하는 함수 및 훅 작성에 대한 규칙을 정의합니다.

## 1. 파일 위치 및 구조

*   **위치**: API 요청 관련 로직은 `service/inbound/query/[도메인].ts` 파일에 작성합니다. (예: `service/inbound/query/auth.ts`, `service/inbound/query/user.ts`)
*   **구성 요소**: 각 파일은 일반적으로 다음 요소들을 포함합니다.
    *   Query Key Factory (`[domain]Keys` 객체)
    *   Request Parameter 타입 정의
    *   Response Data 타입 정의
    *   API 요청 함수 (Fetcher)
    *   React Query 커스텀 훅 (`use[Action]Query`)

## 2. Query Key Factory

*   각 도메인 파일 상단에 `[domain]Keys` 객체를 정의하여 해당 도메인의 Query Key 생성을 관리합니다.
*   객체 내 각 key는 특정 API 요청에 대한 팩토리 함수입니다.
*   팩토리 함수는 API 요청에 필요한 파라미터(Params)를 인자로 받아, 고유한 Query Key 배열을 반환합니다.
*   Query Key 배열의 첫 번째 요소는 일반적으로 데이터의 종류나 엔티티를 나타내는 문자열이며, 이후 요소는 식별자나 파라미터 값입니다.

```typescript
// 예시: service/inbound/query/todos.ts
const todosKeys = {
  // 전체 목록
  all: () => ["todos"] as const, 
  // 특정 ID의 todo
  detail: (params: TodoParams) => ["todos", "detail", params.id] as const,
  // 특정 사용자의 todo 목록
  listByUser: (params: UserTodosParams) => ["todos", "list", params.userId] as const,
};
```
*주의: `as const`를 사용하여 Query Key 배열을 Readonly Tuple로 만들어 타입 안정성을 높이는 것을 권장합니다.*

## 3. 타입 정의

*   각 API 요청에 필요한 **Request Parameter 타입**과 **Response Data 타입**을 명확하게 정의합니다.
*   타입 이름은 요청 함수명 또는 데이터의 종류를 명확히 나타내도록 작성합니다. (예: `GetTodoParams`, `GetTodoResponse`)

```typescript
// 예시: service/inbound/query/todos.ts
type GetTodoParams = {
  id: number;
};

type Todo = {
  userId: number;
  id: number;
  title: string;
  completed: boolean;
};

type GetTodoResponse = Todo; 
```

## 4. API 요청 함수 (Fetcher)

*   실제 API 통신을 수행하는 `async` 함수를 정의합니다.
*   함수 이름은 수행하는 작업을 명확히 나타내도록 작성합니다. (예: `getTodo`, `createTodo`)
*   정의된 Request Parameter 타입을 인자로 받습니다.
*   `service/lib/Http/adapter`의 `API` 클라이언트 인스턴스 (Axios 등)를 사용하여 HTTP 요청을 보냅니다.
*   정의된 Response Data 타입을 반환하도록 명시합니다. 에러 처리는 `API` 클라이언트 또는 전역 에러 핸들러에서 처리하는 것을 가정합니다.

```typescript
// 예시: service/inbound/query/todos.ts
import { API } from "@/service/lib/Http/adapter";

export const getTodo = async (params: GetTodoParams): Promise<GetTodoResponse> => {
  const response = await API.get<GetTodoResponse>(`/todos/${params.id}`);
  // API 클라이언트에서 data를 바로 반환한다고 가정
  return response; 
};
```

## 5. React Query 커스텀 훅

*   각 API 요청 함수에 대응하는 React Query 커스텀 훅을 작성합니다.
*   훅 이름은 `use[Action]Query` 규칙을 따릅니다. (예: `useGetTodoQuery`)
*   **(참고)** `QueryFn` 타입 (`@/domain/sharedkernel`): 이 타입은 쿼리 훅의 표준 인터페이스를 정의하는 것으로 보입니다. 주로 `params`와 `queryOptions`를 포함하는 객체를 인자로 받습니다. (만약 `@/domain` 경로가 불확실하거나 타입 정의가 없다면, 이 부분은 프로젝트에 맞게 조정 필요)
*   훅은 `params` (API 요청 함수에 전달될 파라미터)와 `queryOptions` (`useQuery`에 전달될 추가 옵션)를 포함하는 객체를 인자로 받습니다.
*   내부적으로 `@tanstack/react-query`의 `useQuery`를 호출합니다.
    *   `queryKey`: 해당 도메인의 `[domain]Keys` 객체 내 팩토리 함수를 사용하여 생성합니다. (예: `todosKeys.detail(params)`)
    *   `queryFn`: 작성된 API 요청 함수(Fetcher)를 호출하는 람다 함수를 전달합니다. (예: `() => getTodo(params)`)
    *   `queryOptions`: 인자로 받은 `queryOptions`를 그대로 전달하여 `enabled`, `staleTime`, `gcTime` 등을 설정할 수 있도록 합니다.
*   `useQuery`의 반환값을 그대로 반환합니다.

```typescript
// 예시: service/inbound/query/todos.ts
import { useQuery, UseQueryOptions } from "@tanstack/react-query";
// import { QueryFn } from "@/domain/sharedkernel"; // 프로젝트에 맞게 경로/타입 확인 필요

// QueryFn 타입이 없거나 다를 경우 아래처럼 직접 정의 가능
type QueryHookParams<TParams, TData> = {
  params: TParams;
  queryOptions?: Omit<UseQueryOptions<TData, Error>, 'queryKey' | 'queryFn'>;
};

export const useGetTodoQuery = 
  // QueryFn 타입 사용 시: QueryFn<GetTodoParams, GetTodoResponse, typeof todosKeys.detail, typeof getTodo>
  // 직접 정의 시:
  ({ params, queryOptions }: QueryHookParams<GetTodoParams, GetTodoResponse>) => {
  return useQuery({
    queryKey: todosKeys.detail(params), // Key Factory 사용
    queryFn: () => getTodo(params),    // Fetcher 사용
    ...queryOptions,                    // 외부 옵션 주입
  });
};
```

## 6. 훅 메타데이터 할당 (정적 속성)

*   작성된 커스텀 훅에 `key`와 `fetcher` 정적 속성을 할당합니다.
*   `key`: 해당 훅이 사용하는 Query Key 팩토리 함수를 가리킵니다.
*   `fetcher`: 해당 훅이 사용하는 API 요청 함수(Fetcher)를 가리킵니다.
*   이를 통해 훅 외부에서 Query Key나 Fetcher에 쉽게 접근할 수 있습니다 (예: Prefetching, Manual Invalidation).

```typescript
// 예시: service/inbound/query/todos.ts
useGetTodoQuery.key = todosKeys.detail;
useGetTodoQuery.fetcher = getTodo;
```

## 7. 전체 예시

```typescript
// service/inbound/query/todos.ts
import { API } from "@/service/lib/Http/adapter";
import { useQuery, UseQueryOptions } from "@tanstack/react-query";
// import { QueryFn } from "@/domain/sharedkernel"; // 확인 필요

// 1. Query Key Factory
const todosKeys = {
  all: () => ["todos"] as const,
  detail: (params: GetTodoParams) => ["todos", "detail", params.id] as const,
};

// 2. 타입 정의
type GetTodoParams = {
  id: number;
};

type Todo = {
  userId: number;
  id: number;
  title: string;
  completed: boolean;
};

type GetTodoResponse = Todo;

// 3. API 요청 함수 (Fetcher)
export const getTodo = async (params: GetTodoParams): Promise<GetTodoResponse> => {
  const response = await API.get<GetTodoResponse>(`/todos/${params.id}`);
  return response; 
};

// 4. React Query 커스텀 훅
type QueryHookParams<TParams, TData> = {
  params: TParams;
  queryOptions?: Omit<UseQueryOptions<TData, Error>, 'queryKey' | 'queryFn'>;
};

export const useGetTodoQuery = 
  ({ params, queryOptions }: QueryHookParams<GetTodoParams, GetTodoResponse>) => {
  return useQuery({
    queryKey: todosKeys.detail(params), 
    queryFn: () => getTodo(params),    
    ...queryOptions,                   
  });
};

// 5. 훅 메타데이터 할당
useGetTodoQuery.key = todosKeys.detail;
useGetTodoQuery.fetcher = getTodo;

```
```

이 내용으로 `.cursor/rules/react-query-rule.mdc` 파일을 생성하겠습니다. 괜찮으신가요?