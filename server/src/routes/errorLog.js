const express = require('express');
const router = express.Router();

// ÏóêÎü¨ Î°úÍ∑∏ Ï†ÄÏû•ÏùÑ ÏúÑÌïú Í∞ÑÎã®Ìïú Î©îÎ™®Î¶¨ Ï†ÄÏû•ÏÜå (Ïã§Ï†úÎ°úÎäî Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•Ìï¥Ïïº Ìï®)
let errorLogs = [];

/**
 * POST /error-log
 * ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Î∞úÏÉùÌïú ÏóêÎü¨ Î°úÍ∑∏Î•º Î∞õÏïÑÏÑú Ï†ÄÏû•
 */
router.post('/error-log', async (req, res) => {
  try {
    const {
      message,
      stack,
      context,
      timestamp,
      platform,
      version,
      userAgent
    } = req.body;

    // ÏóêÎü¨ Î°úÍ∑∏ Í∞ùÏ≤¥ ÏÉùÏÑ±
    const errorLog = {
      id: Date.now(),
      message: message || 'Unknown error',
      stack: stack || '',
      context: context || 'unknown',
      timestamp: timestamp || new Date().toISOString(),
      platform: platform || 'unknown',
      version: version || '1.0.0',
      userAgent: userAgent || 'unknown',
      createdAt: new Date()
    };

    // Î°úÍ∑∏ Ï†ÄÏû• (ÏµúÎåÄ 1000Í∞ú Ïú†ÏßÄ)
    errorLogs.push(errorLog);
    if (errorLogs.length > 1000) {
      errorLogs = errorLogs.slice(-1000);
    }

    // ÏΩòÏÜîÏóê ÏóêÎü¨ Î°úÍ∑∏ Ï∂úÎ†•
    console.error('üö® CLIENT ERROR LOG:', {
      id: errorLog.id,
      message: errorLog.message,
      context: errorLog.context,
      timestamp: errorLog.timestamp,
      platform: errorLog.platform,
      version: errorLog.version
    });

    // Ïä§ÌÉù Ìä∏Î†àÏù¥Ïä§Í∞Ä ÏûàÏúºÎ©¥ Î≥ÑÎèÑÎ°ú Ï∂úÎ†•
    if (errorLog.stack) {
      console.error('üìã STACK TRACE:', errorLog.stack);
    }

    res.status(200).json({
      success: true,
      message: 'Error log saved successfully',
      errorId: errorLog.id
    });

  } catch (error) {
    console.error('Error saving error log:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to save error log'
    });
  }
});

/**
 * GET /error-log
 * Ï†ÄÏû•Îêú ÏóêÎü¨ Î°úÍ∑∏ Ï°∞Ìöå (Í¥ÄÎ¶¨ÏûêÏö©)
 */
router.get('/error-log', (req, res) => {
  try {
    const { limit = 50, offset = 0 } = req.query;
    
    const limitedLogs = errorLogs
      .slice(parseInt(offset), parseInt(offset) + parseInt(limit))
      .reverse(); // ÏµúÏã† ÏàúÏúºÎ°ú Ï†ïÎ†¨

    res.status(200).json({
      success: true,
      data: {
        logs: limitedLogs,
        total: errorLogs.length,
        limit: parseInt(limit),
        offset: parseInt(offset)
      }
    });

  } catch (error) {
    console.error('Error retrieving error logs:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to retrieve error logs'
    });
  }
});

/**
 * DELETE /error-log
 * ÏóêÎü¨ Î°úÍ∑∏ Ï¥àÍ∏∞Ìôî (Í¥ÄÎ¶¨ÏûêÏö©)
 */
router.delete('/error-log', (req, res) => {
  try {
    const deletedCount = errorLogs.length;
    errorLogs = [];

    console.log(`üóëÔ∏è Cleared ${deletedCount} error logs`);

    res.status(200).json({
      success: true,
      message: `Cleared ${deletedCount} error logs`
    });

  } catch (error) {
    console.error('Error clearing error logs:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to clear error logs'
    });
  }
});

module.exports = router; 